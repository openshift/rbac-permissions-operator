//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/openshift/rbac-permissions-operator/api/v1alpha1.SubjectPermissionSpec":   schema_openshift_rbac_permissions_operator_api_v1alpha1_SubjectPermissionSpec(ref),
		"github.com/openshift/rbac-permissions-operator/api/v1alpha1.SubjectPermissionStatus": schema_openshift_rbac_permissions_operator_api_v1alpha1_SubjectPermissionStatus(ref),
	}
}

func schema_openshift_rbac_permissions_operator_api_v1alpha1_SubjectPermissionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized. SubjectPermissionSpec defines the desired state of SubjectPermission",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"subjectKind": {
						SchemaProps: spec.SchemaProps{
							Description: "Important: Run \"make\" to regenerate code after modifying this file Kind of the Subject that is being granted permissions by the operator",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subjectName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Subject granted permissions by the operator",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterPermissions": {
						SchemaProps: spec.SchemaProps{
							Description: "List of permissions applied at Cluster scope",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"permissions": {
						SchemaProps: spec.SchemaProps{
							Description: "List of permissions applied at Namespace scope",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/openshift/rbac-permissions-operator/api/v1alpha1.Permission"),
									},
								},
							},
						},
					},
				},
				Required: []string{"subjectKind", "subjectName"},
			},
		},
		Dependencies: []string{
			"github.com/openshift/rbac-permissions-operator/api/v1alpha1.Permission"},
	}
}

func schema_openshift_rbac_permissions_operator_api_v1alpha1_SubjectPermissionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubjectPermissionStatus defines the observed state of SubjectPermission",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Important: Run \"make\" to regenerate code after modifying this file List of conditions for the CR",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/openshift/rbac-permissions-operator/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift/rbac-permissions-operator/api/v1alpha1.Condition"},
	}
}
